@using System.Collections.Generic
@using Microsoft.AspNet.Http
@using Microsoft.AspNet.Http.Authentication
@model LoginViewModel
@inject SignInManager<ApplicationUser> SignInManager

@{
    ViewData["Title"] = "[Folio]";
}
<html lang="en">
<head>
    <script src="~/lib/Chart.js/Chart.min.js"></script>
</head>

<body>
    <div class="index-title"> 
        Folio Marketing
    </div>
    <div class="table-title">
        <h3>Live Stocks</h3>
    </div>
    <table class="table-fill">
        <thead>
            <tr>
                <th class="text-left">Symbol</th>
                <th class="text-left">Name</th>
                <th class="text-left">Price</th>
                <th class="text-left">Change</th>
            </tr>
        </thead>
        <tbody class="table-hover">
            <tr>
                <td id="tickerGOOG"class="text-left">Symbol</td>
                <td id="nameGOOG" class="text-left">Name</td>
                <td id="priceGOOG"class="text-left">Price</td>
                <td id="changeGOOG"class="text-left">Change</td>
            </tr>
        </tbody>
    </table>
    <p>
        <div>
            <canvas id="myChart" width="1000" height="600"></canvas>
        </div>
    </p>
</body>
</html>
<script>
    var data = {
        labels: ["January"],
        datasets: [
            {
                label: "My First dataset",
                fillColor: "rgba(220,220,220,0.5)",
                strokeColor: "rgba(220,220,220,0.8)",
                highlightFill: "rgba(220,220,220,0.75)",
                highlightStroke: "rgba(220,220,220,1)",
                data: [600]
            },
            {
                label: "My Second dataset",
                fillColor: "rgba(151,187,205,0.5)",
                strokeColor: "rgba(151,187,205,0.8)",
                highlightFill: "rgba(151,187,205,0.75)",
                highlightStroke: "rgba(151,187,205,1)",
                data: [700]
            }
        ]
    };
    var ctx = document.getElementById("myChart").getContext("2d");
    var myNewChart = new Chart(ctx).Bar(data);
    new Chart(ctx).Bar(data);
    var yolo = "whatever";
    function getData(sym) {
        var url = "https://query.yahooapis.com/v1/public/yql";
        var symbol = sym;
        var data = encodeURIComponent("select * from yahoo.finance.quotes where symbol in ('" + symbol + "')");

        $.getJSON(url, 'q=' + data + "&format=json&diagnostics=true&env=http://datatables.org/alltables.env")
            .done(function (data) {
                yolo = data;
                console.log(yolo);
                if (yolo.query.results.quote.LastTradePriceOnly !== $("#price" + sym).text() || yolo.query.results.quote.LastTradePriceOnly == null) {
                    $("#price" + sym).fadeOut(function () {
                        $(this).text(yolo.query.results.quote.LastTradePriceOnly)
                    }).fadeIn();
                    $("#change" + sym).fadeOut(function () {
                        $(this).text(yolo.query.results.quote.PercentChange)
                    }).fadeIn();
                    $("#name" + sym).fadeOut(function () {
                        $(this).text(yolo.query.results.quote.Name)
                    }).fadeIn();
                    $("#ticker" + sym).fadeOut(function () {
                        $(this).text(yolo.query.results.quote.symbol)
                    }).fadeIn();
                    myNewChart.datasets[0].bars[0].value = yolo.query.results.quote.LastTradePriceOnly;
                    myNewChart.update();
                }
            })
            .fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ", " + error;
                $("#price" + sym).text('Request failed: ' + err);
            });
    }
    $(document).ready(function () {
        getData("GOOG");
        getData("GOOG");
    });
    var date = new Date();
    var hours = date.getHours();
    console.log(hours);
    console.log(yolo);
    if (hours < 16 && hours > 9) {
        window.setInterval(function () { getData("GOOG"), console.log(yolo)}, 5000);
    }

    </script>